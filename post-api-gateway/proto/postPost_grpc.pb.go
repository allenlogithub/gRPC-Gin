// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostPostServiceClient is the client API for PostPostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostPostServiceClient interface {
	PostPost(ctx context.Context, in *PostPostRequest, opts ...grpc.CallOption) (*PostPostReply, error)
	DelPost(ctx context.Context, in *DelPostRequest, opts ...grpc.CallOption) (*DelPostReply, error)
}

type postPostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostPostServiceClient(cc grpc.ClientConnInterface) PostPostServiceClient {
	return &postPostServiceClient{cc}
}

func (c *postPostServiceClient) PostPost(ctx context.Context, in *PostPostRequest, opts ...grpc.CallOption) (*PostPostReply, error) {
	out := new(PostPostReply)
	err := c.cc.Invoke(ctx, "/proto.PostPostService/PostPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postPostServiceClient) DelPost(ctx context.Context, in *DelPostRequest, opts ...grpc.CallOption) (*DelPostReply, error) {
	out := new(DelPostReply)
	err := c.cc.Invoke(ctx, "/proto.PostPostService/DelPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostPostServiceServer is the server API for PostPostService service.
// All implementations must embed UnimplementedPostPostServiceServer
// for forward compatibility
type PostPostServiceServer interface {
	PostPost(context.Context, *PostPostRequest) (*PostPostReply, error)
	DelPost(context.Context, *DelPostRequest) (*DelPostReply, error)
	mustEmbedUnimplementedPostPostServiceServer()
}

// UnimplementedPostPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostPostServiceServer struct {
}

func (UnimplementedPostPostServiceServer) PostPost(context.Context, *PostPostRequest) (*PostPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPost not implemented")
}
func (UnimplementedPostPostServiceServer) DelPost(context.Context, *DelPostRequest) (*DelPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPost not implemented")
}
func (UnimplementedPostPostServiceServer) mustEmbedUnimplementedPostPostServiceServer() {}

// UnsafePostPostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostPostServiceServer will
// result in compilation errors.
type UnsafePostPostServiceServer interface {
	mustEmbedUnimplementedPostPostServiceServer()
}

func RegisterPostPostServiceServer(s grpc.ServiceRegistrar, srv PostPostServiceServer) {
	s.RegisterService(&PostPostService_ServiceDesc, srv)
}

func _PostPostService_PostPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostPostServiceServer).PostPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PostPostService/PostPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostPostServiceServer).PostPost(ctx, req.(*PostPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostPostService_DelPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostPostServiceServer).DelPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PostPostService/DelPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostPostServiceServer).DelPost(ctx, req.(*DelPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostPostService_ServiceDesc is the grpc.ServiceDesc for PostPostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostPostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PostPostService",
	HandlerType: (*PostPostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostPost",
			Handler:    _PostPostService_PostPost_Handler,
		},
		{
			MethodName: "DelPost",
			Handler:    _PostPostService_DelPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postPost.proto",
}
