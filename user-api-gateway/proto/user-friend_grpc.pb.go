// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: user-friend.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserFriendServiceClient is the client API for UserFriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFriendServiceClient interface {
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListReply, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserReply, error)
	GetFriendRequestList(ctx context.Context, in *GetFriendRequestListRequest, opts ...grpc.CallOption) (*GetFriendRequestListReply, error)
}

type userFriendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFriendServiceClient(cc grpc.ClientConnInterface) UserFriendServiceClient {
	return &userFriendServiceClient{cc}
}

func (c *userFriendServiceClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListReply, error) {
	out := new(GetFriendListReply)
	err := c.cc.Invoke(ctx, "/proto.UserFriendService/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendServiceClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserReply, error) {
	out := new(SearchUserReply)
	err := c.cc.Invoke(ctx, "/proto.UserFriendService/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendServiceClient) GetFriendRequestList(ctx context.Context, in *GetFriendRequestListRequest, opts ...grpc.CallOption) (*GetFriendRequestListReply, error) {
	out := new(GetFriendRequestListReply)
	err := c.cc.Invoke(ctx, "/proto.UserFriendService/GetFriendRequestList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFriendServiceServer is the server API for UserFriendService service.
// All implementations must embed UnimplementedUserFriendServiceServer
// for forward compatibility
type UserFriendServiceServer interface {
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListReply, error)
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserReply, error)
	GetFriendRequestList(context.Context, *GetFriendRequestListRequest) (*GetFriendRequestListReply, error)
	mustEmbedUnimplementedUserFriendServiceServer()
}

// UnimplementedUserFriendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserFriendServiceServer struct {
}

func (UnimplementedUserFriendServiceServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedUserFriendServiceServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserFriendServiceServer) GetFriendRequestList(context.Context, *GetFriendRequestListRequest) (*GetFriendRequestListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequestList not implemented")
}
func (UnimplementedUserFriendServiceServer) mustEmbedUnimplementedUserFriendServiceServer() {}

// UnsafeUserFriendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFriendServiceServer will
// result in compilation errors.
type UnsafeUserFriendServiceServer interface {
	mustEmbedUnimplementedUserFriendServiceServer()
}

func RegisterUserFriendServiceServer(s grpc.ServiceRegistrar, srv UserFriendServiceServer) {
	s.RegisterService(&UserFriendService_ServiceDesc, srv)
}

func _UserFriendService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFriendServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserFriendService/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFriendServiceServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFriendService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFriendServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserFriendService/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFriendServiceServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFriendService_GetFriendRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFriendServiceServer).GetFriendRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserFriendService/GetFriendRequestList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFriendServiceServer).GetFriendRequestList(ctx, req.(*GetFriendRequestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFriendService_ServiceDesc is the grpc.ServiceDesc for UserFriendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFriendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserFriendService",
	HandlerType: (*UserFriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendList",
			Handler:    _UserFriendService_GetFriendList_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _UserFriendService_SearchUser_Handler,
		},
		{
			MethodName: "GetFriendRequestList",
			Handler:    _UserFriendService_GetFriendRequestList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-friend.proto",
}
