// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: user-post.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPostServiceClient is the client API for UserPostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPostServiceClient interface {
	SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestReply, error)
	AcceptFriendRequest(ctx context.Context, in *AcceptFriendRequestRequest, opts ...grpc.CallOption) (*AcceptFriendRequestReply, error)
	RejectFriendRequest(ctx context.Context, in *RejectFriendRequestRequest, opts ...grpc.CallOption) (*RejectFriendRequestReply, error)
}

type userPostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPostServiceClient(cc grpc.ClientConnInterface) UserPostServiceClient {
	return &userPostServiceClient{cc}
}

func (c *userPostServiceClient) SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestReply, error) {
	out := new(SendFriendRequestReply)
	err := c.cc.Invoke(ctx, "/proto.UserPostService/SendFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) AcceptFriendRequest(ctx context.Context, in *AcceptFriendRequestRequest, opts ...grpc.CallOption) (*AcceptFriendRequestReply, error) {
	out := new(AcceptFriendRequestReply)
	err := c.cc.Invoke(ctx, "/proto.UserPostService/AcceptFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) RejectFriendRequest(ctx context.Context, in *RejectFriendRequestRequest, opts ...grpc.CallOption) (*RejectFriendRequestReply, error) {
	out := new(RejectFriendRequestReply)
	err := c.cc.Invoke(ctx, "/proto.UserPostService/RejectFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPostServiceServer is the server API for UserPostService service.
// All implementations must embed UnimplementedUserPostServiceServer
// for forward compatibility
type UserPostServiceServer interface {
	SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestReply, error)
	AcceptFriendRequest(context.Context, *AcceptFriendRequestRequest) (*AcceptFriendRequestReply, error)
	RejectFriendRequest(context.Context, *RejectFriendRequestRequest) (*RejectFriendRequestReply, error)
	mustEmbedUnimplementedUserPostServiceServer()
}

// UnimplementedUserPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPostServiceServer struct {
}

func (UnimplementedUserPostServiceServer) SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedUserPostServiceServer) AcceptFriendRequest(context.Context, *AcceptFriendRequestRequest) (*AcceptFriendRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriendRequest not implemented")
}
func (UnimplementedUserPostServiceServer) RejectFriendRequest(context.Context, *RejectFriendRequestRequest) (*RejectFriendRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectFriendRequest not implemented")
}
func (UnimplementedUserPostServiceServer) mustEmbedUnimplementedUserPostServiceServer() {}

// UnsafeUserPostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPostServiceServer will
// result in compilation errors.
type UnsafeUserPostServiceServer interface {
	mustEmbedUnimplementedUserPostServiceServer()
}

func RegisterUserPostServiceServer(s grpc.ServiceRegistrar, srv UserPostServiceServer) {
	s.RegisterService(&UserPostService_ServiceDesc, srv)
}

func _UserPostService_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserPostService/SendFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).SendFriendRequest(ctx, req.(*SendFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_AcceptFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).AcceptFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserPostService/AcceptFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).AcceptFriendRequest(ctx, req.(*AcceptFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_RejectFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).RejectFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserPostService/RejectFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).RejectFriendRequest(ctx, req.(*RejectFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPostService_ServiceDesc is the grpc.ServiceDesc for UserPostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserPostService",
	HandlerType: (*UserPostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFriendRequest",
			Handler:    _UserPostService_SendFriendRequest_Handler,
		},
		{
			MethodName: "AcceptFriendRequest",
			Handler:    _UserPostService_AcceptFriendRequest_Handler,
		},
		{
			MethodName: "RejectFriendRequest",
			Handler:    _UserPostService_RejectFriendRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-post.proto",
}
